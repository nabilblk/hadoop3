# Example with AdvancedLoggerSink.java
# Compile AdvancedLoggerSink.java with the libs from flume/lib directory and jar it
# Let us say the directory you are creating this jar is /opt/flume

javac -classpath /opt/cloudera/parcels/CDH/lib/flume/lib/* AdvancedLoggerSink.java
jar cvf AdvancedLoggerSink.jar AdvancedLoggerSink.class

#Move AdvancedLoggerSink.jar to  /opt/cloudera/parcels/CDH/lib/flume-ng/plugins.d/advanced-logger-sink/lib

# Create plugin directories if required
cd /opt/cloudera/parcels/CDH/lib/flume-ng
mkdir plugins.d
cd plugins.d
mkdir advanced-logger-sink; cd advanced-logger-sink
mkdir lib
cp /opt/flume/AdvancedLoggerSink.jar  /opt/cloudera/parcels/CDH/lib/flume-ng/plugins.d/AdvancedLoggerSink/lib

flume-ng agent --plugins-path /opt/cloudera/parcels/CDH/lib/flume-ng --conf . --conf-file logger.flume --name a1 -Dflume.root.logger=INFO,console

# logger.flume
# example.conf: A single-node Flume configuration

# Name the components on this agent
a1.sources = r1
a1.sinks = k1
a1.channels = c1

# Describe/configure the source
a1.sources.r1.type = netcat
a1.sources.r1.bind = localhost
a1.sources.r1.port = 44444

# Describe the sink
a1.sinks.k1.type = AdvancedLoggerSink
# maxBytes is the maximum number of bytes to output for the body of the event
# the default is 16 bytes. If you set maxBytes to 0 then the entire record will
# be output.  
a1.sinks.k1.maxBytes = 0

# Use a channel which buffers events in memory
a1.channels.c1.type = memory
a1.channels.c1.capacity = 1000
a1.channels.c1.transactionCapacity = 100

# Bind the source and sink to the channel
a1.sources.r1.channels = c1
a1.sinks.k1.channel = c1